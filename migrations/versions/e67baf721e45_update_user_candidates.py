"""

Revision ID: e67baf721e45
Revises: 274c92aeae37
Create Date: 2021-01-22 16:03:25.916777

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "e67baf721e45"
down_revision = "274c92aeae37"
branch_labels = None
depends_on = None

gender = postgresql.ENUM("MALE", "FEMALE", name="gender")


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    gender.create(op.get_bind())

    op.add_column(
        "candidate_jobs",
        sa.Column(
            "id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
    )
    op.alter_column(
        "candidates", "linkedin_url", existing_type=sa.VARCHAR(), nullable=True
    )
    op.alter_column(
        "candidates", "user_id", existing_type=postgresql.UUID(), nullable=False
    )
    op.drop_constraint("candidates_avatar_path_key", "candidates", type_="unique")
    op.drop_constraint("candidates_email_key", "candidates", type_="unique")
    op.drop_constraint("candidates_linkedin_url_key", "candidates", type_="unique")
    op.drop_column("candidates", "avatar_path")
    op.drop_column("candidates", "email")
    op.drop_column("candidates", "name")
    op.drop_constraint("jobs_description_key", "jobs", type_="unique")
    op.add_column("users", sa.Column("avatar_path", sa.String(), nullable=True))
    op.add_column("users", sa.Column("dob", sa.DateTime(), nullable=True))
    op.add_column("users", sa.Column("first_name", sa.String(), nullable=False))
    op.add_column(
        "users",
        sa.Column("has_consented", sa.Boolean(), server_default="f", nullable=False),
    )
    op.add_column(
        "users", sa.Column("has_consented_date", sa.DateTime(), nullable=True)
    )
    op.add_column("users", sa.Column("last_name", sa.String(), nullable=False))
    op.add_column("users", sa.Column("phone", sa.String(), nullable=True))
    op.alter_column("users", "email", existing_type=sa.VARCHAR(), nullable=True)

    op.add_column(
        "users", sa.Column("gender", gender),
    )
    op.drop_constraint("users_email_key", "users", type_="unique")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint("users_email_key", "users", ["email"])
    op.alter_column("users", "email", existing_type=sa.VARCHAR(), nullable=False)
    op.drop_column("users", "phone")
    op.drop_column("users", "last_name")
    op.drop_column("users", "has_consented_date")
    op.drop_column("users", "has_consented")
    op.drop_column("users", "gender")
    op.drop_column("users", "first_name")
    op.drop_column("users", "dob")
    op.drop_column("users", "avatar_path")
    op.create_unique_constraint("jobs_description_key", "jobs", ["description"])
    op.add_column(
        "candidates",
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "candidates",
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "candidates",
        sa.Column("avatar_path", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.create_unique_constraint(
        "candidates_linkedin_url_key", "candidates", ["linkedin_url"]
    )
    op.create_unique_constraint("candidates_email_key", "candidates", ["email"])
    op.create_unique_constraint(
        "candidates_avatar_path_key", "candidates", ["avatar_path"]
    )
    op.alter_column(
        "candidates", "user_id", existing_type=postgresql.UUID(), nullable=True
    )
    op.alter_column(
        "candidates", "linkedin_url", existing_type=sa.VARCHAR(), nullable=False
    )
    op.drop_column("candidate_jobs", "id")
    gender.drop(op.get_bind())
    # ### end Alembic commands ###
